# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-05-12 19:55
from __future__ import unicode_literals

import apps.seguimiento.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('seguimiento', '0032_auto_20170420_1107'),
    ]

    operations = [
        migrations.AlterField(
            model_name='item',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='item',
            name='descripcion',
            field=models.CharField(max_length=120, validators=[django.core.validators.RegexValidator(code='Numero Invalido', message='La descripcion del item no es valido', regex='^(([a-zA-Z0-9]{2,} )||([a-zA-Z0-9]{2,}))+$')]),
        ),
        migrations.AlterField(
            model_name='materiales_locales',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='materiales_locales',
            name='descripcion',
            field=models.CharField(max_length=60, validators=[django.core.validators.RegexValidator(code='Numero Invalido', message='La descripcion del material no es valida', regex='^(([a-zA-Z0-9]{2,} )||([a-zA-Z0-9]{2,}))+$')]),
        ),
        migrations.AlterField(
            model_name='materiales_locales',
            name='precio_total',
            field=models.FloatField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='materiales_locales',
            name='unidad',
            field=models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(code='Numero Invalido', message='El tipo de unidad no es valido', regex='^[a-zA-Z]{2,}$')]),
        ),
        migrations.AlterField(
            model_name='peticion_herramientas',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='peticion_insumos',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='peticion_insumos',
            name='precio_estimado_total',
            field=models.FloatField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='peticion_maquinaria_equipo',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='peticion_materiales',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='peticion_materiales',
            name='precio_estimado_total',
            field=models.FloatField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='proyecto',
            name='entidad_contratante',
            field=models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='Numero Invalido', message='El nombre de la entidad no es valido', regex='^(([a-zA-Z0-9]{2,} )||([a-zA-Z0-9]{2,}))+$')]),
        ),
        migrations.AlterField(
            model_name='proyecto',
            name='modalidad_de_contratacion',
            field=models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='Numero Invalido', message='El tipo de modalidad no es valido', regex='^[a-zA-Z]{2,}$')]),
        ),
        migrations.AlterField(
            model_name='proyecto',
            name='objeto_de_la_contratacion',
            field=models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='Numero Invalido', message='El objeto de la contratacion del proyecto no es valido', regex='^(([a-zA-Z0-9]{2,} )||([a-zA-Z0-9]{2,}))+$')]),
        ),
        migrations.AlterField(
            model_name='reporte_fotografico',
            name='fotos_reporte',
            field=models.FileField(default='123456789', upload_to='reporte_fotos/', validators=[apps.seguimiento.models.validate_file_extension]),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='requerimiento_maq_he',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='requerimiento_maq_he',
            name='nombre_maq_he',
            field=models.CharField(max_length=60, validators=[django.core.validators.RegexValidator(code='Numero Invalido', message='La descripcion de la maquinaria/equipo no es valida', regex='^(([a-zA-Z0-9]{2,} )||([a-zA-Z0-9]{2,}))+$')]),
        ),
        migrations.AlterField(
            model_name='requerimiento_maq_he',
            name='precio_total',
            field=models.FloatField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='requerimiento_personal',
            name='cantidad',
            field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
        migrations.AlterField(
            model_name='requerimiento_personal',
            name='precio_total',
            field=models.FloatField(validators=[django.core.validators.MinValueValidator(1, 'El valor no puede ser cero')]),
        ),
    ]
